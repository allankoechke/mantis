name: CMake Multiple Platforms

on:
  push:
    branches: [ "master" ]
    tags:
      - 'v*'
  pull_request:
      branches: [ "master" ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            platform: linux
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
            platform: windows

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1

      - name: Install dependencies on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libzstd-dev

      - name: Install MinGW
        if: matrix.os == 'windows-latest'
        run: |
          choco install mingw --version=13.2.0 --no-progress

      - name: Add MinGW to PATH
        if: matrix.os == 'windows-latest'
        run: |
          echo "C:\ProgramData\mingw64\mingw64\bin" >> $GITHUB_PATH

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -G "MinGW Makefiles"
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_CXX_COMPILER="C:\ProgramData\mingw64\mingw64\bin\g++.exe"
          -DCMAKE_C_COMPILER="C:\ProgramData\mingw64\mingw64\bin\gcc.exe"
          -S ${{ github.workspace }}

      - name: Configure CMake (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Zip the build output
        if: startsWith(github.ref, 'refs/tags/v') && matrix.os == 'ubuntu-latest'
        run: |
          cd ${{ github.workspace }}/build/bin
          mkdir -p zip
          zip -r zip/mantisapp_${{ github.ref_name }}_${{ matrix.platform }}.zip mantisapp*
        shell: bash

      - name: Zip the build output (Windows)
        if: startsWith(github.ref, 'refs/tags/v') && matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $BinPath = "${{ steps.strings.outputs.build-output-dir }}\bin"
          $ZipPath = "$BinPath\zip"
          $ZipFile = "$ZipPath\mantisapp_${{ github.ref_name }}_${{ matrix.platform }}.zip"

          New-Item -ItemType Directory -Force -Path $ZipPath | Out-Null
          Compress-Archive -Path "$BinPath\mantisapp*.exe" -DestinationPath $ZipFile -Force

      - name: Upload zipped artifact
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: mantisapp_${{ github.ref_name }}_${{ matrix.platform }}.zip
          path: |
            ${{ github.workspace }}/build/bin/zip/mantisapp_${{ github.ref_name }}_${{ matrix.platform }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: mantisapp_${{ github.ref_name }}_linux.zip
          path: ./artifacts
          
      - uses: actions/download-artifact@v4
        with:
          name: mantisapp_${{ github.ref_name }}_windows.zip
          path: ./artifacts

      - name: Show artifact contents
        run: ls -R ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          files: ./artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload-docs:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1

      - name: Install Doxygen (Ubuntu)
        run: sudo apt-get install -y doxygen graphviz

      - name: Configure CMake
        run: cmake -B build -S .

      - name: Build Doxygen Docs
        run: cmake --build build --target doc

      - name: Switch to pages branch and sync docs
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
  
          # Fetch and checkout the 'gh-pages' branch (or create if missing)
          git fetch origin gh-pages || true
          git switch gh-pages || git checkout --orphan gh-pages
          
          # Copy CNAME record before deleting the directory
          cp docs/CNAME build/docs/html/
          
          # Clean and copy new docs
          rm -rf docs
          mkdir -p docs
          cp -r build/docs/html/* docs/
  
          # Commit and push
          git add docs

          if git diff --cached --quiet; then
            echo "âœ… No changes to commit."
          else          
            git commit -m "CI: Update Doxygen Docs"
            git push origin gh-pages
          fi
